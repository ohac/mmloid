#!/usr/bin/ruby
# coding: utf-8
$: << File.join(File.dirname(__FILE__), '../lib') # TODO gem
require 'utau4linux'

if ARGV.size < 2
  puts "usage: ruby bin/utau4linux input.mml output.wav [-v] [-s] [-e engine]"
  puts " -v : verbose"
  puts " -s : use SoX instead of #{$tool}"
  puts " -e : #{$resamp} (default), sox"
  exit
end

file = ARGV[0]
outputfile = ARGV[1]
$verbose = ARGV.include?('-v')
$usesox = ARGV.include?('-s')
$rmnoise = ARGV.include?('-n')
enginei = ARGV.index('-e')
$resamp = ARGV[enginei + 1] if enginei

@tempo = 120
@octave = 4
@deflen = 4

lyric = []
dura = []
notes = []

body = File.open(file, 'r'){|fd|fd.read}
mml = ''

loop do
  pre, str, post = body.partition(/[ぁ-ゞ]+/u)
  mml += pre
  break if post.empty?
  roma = KANA2ROMA[str]
  mml += '!' + roma.to_s if roma
  mml += ' '
  body = post
end

mml.gsub(ABNFParser::MMLLine) do |line|
  next if /^#/ === line
  line.chomp!
  line.gsub(ABNFParser::Event) do |ev|
    case ev[0]
    when 't'
      @tempo = ev[1..-1].to_i
    when 'v'
    when "'"
    when '@'
    when ';'
    when 'p'
    when 'w'
    when 'o'
      @octave = ev[1..-1].to_i
    when /[<>]/
      @octave += ev[0] == '>' ? 1 : -1
    when 'l'
      @deflen = ev[1..-1].to_i
    when 'q'
    when 'r' # rest
      if ev.size == 1
        len = @deflen
        dot = false
      else
        len = ev[1..-1].to_i
        dot = ev[-1] == '.'
      end
      lyric << :r
      dura << [@tempo, 1920 / len + (dot ? 1920 / 2 / len : 0)]
      notes << nil
    when /[a-g]/
      note, len, dot = ABNFParser.parsenotestr(ev, @octave, @deflen, false)
      dura << [@tempo, 1920 / len + (dot ? 1920 / 2 / len : 0)]
      notes << note
    else
      lyric << ev[1..-1].to_sym
    end
  end
end

lyric << :r

convert2wav(lyric, dura, notes, outputfile)
